# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CategoryInput {
  id: Int!
  name: String
}

type CategoryModel {
  id: Int
  name: String!
  rooms: [RoomModel!]!
}

type ChannelModel {
  id: Int!
  name: String!
  room: RoomModel!
  team: RoomModel!
  threads: [ThreadModel!]!
  user: UserModel!
}

type ChannelResponse {
  affected: Int
}

input ConnectChannelInput {
  id: Int!
}

input ConnectRoomInput {
  id: Int!
}

input ConnectThreadInput {
  id: Int!
}

input ConnectUserInput {
  avatar: String
  email: String
  githubId: String
  id: Int!
  introduction: String
  name: String
  skills: [SkillInput!]
  twitterId: String
  userId: String
}

input CreateCategoryInput {
  name: String!
}

input CreateChannelInput {
  name: String!
  room: ConnectRoomInput!
}

input CreateMessageInput {
  text: String!
  thread: ConnectThreadInput!
  user: ConnectUserInput!
}

input CreateRoomInput {
  categories: [CategoryInput!]!
  description: String
  icon: String
  isRequired: Boolean!
  members: [CreateRoomMembersUserInput!]!
  name: String!
  owner: ConnectUserInput!
  recruitNumbers: Int!
  rectuiting: Boolean
  repositoryUrl: String
  skills: [SkillInput!]!
  title: String!
  typeIds: [Int!]!
}

input CreateRoomMembersUserInput {
  room: UpdateRoomInput
  user: ConnectUserInput!
}

input CreateSkillInput {
  icon: String!
  id: Int!
  name: String!
}

input CreateThreadInput {
  channel: ConnectChannelInput!
  text: String!
  user: ConnectUserInput!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input FetchThreadInput {
  channelId: Int!
  cursor: String!
}

enum MemberState {
  EJECTED
  JOINING
  LEAVE
  PENDING
}

type MessageModel {
  createdAt: DateTime!
  id: Int!
  text: String!
  thread: ThreadModel!
  user: UserModel!
}

type Mutation {
  applyRoom(roomId: Int!, userId: Int!): RoomModel!
  createCategory(createCategoryInput: CreateCategoryInput!): CategoryModel!
  createChannel(input: CreateChannelInput!): ChannelModel!
  createMessage(input: CreateMessageInput!): MessageModel!
  createRoom(input: CreateRoomInput!): RoomModel!
  createSkill(createSkillInput: CreateSkillInput!): SkillModel!
  createThread(input: CreateThreadInput!): ThreadModel!
  deleteChannel(id: Int!): ChannelResponse!
  deleteRoom(id: Int!): RoomModel!
  joinRoom(roomId: Int!, userId: Int!): RoomModel!
  leaveRoom(roomId: Int!, userId: Int!): RoomModel!
  removeCategory(id: Int!): CategoryModel!
  removeMessage(id: Int!): ChannelResponse!
  removeSkill(id: Int!): SkillModel!
  removeThread(id: Int!): ThreadModel!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): CategoryModel!
  updateMessage(input: UpdateMessageInput!): MessageModel!
  updateRoom(updateRoomInput: UpdateRoomInput!): RoomModel!
  updateSkill(updateSkillInput: UpdateSkillInput!): SkillModel!
  updateThread(input: UpdateThreadInput!): ThreadModel!
  updateUser(updateUserInput: UpdateUserInput!): UserModel!
}

type Query {
  categories: [CategoryModel!]!
  category(id: Int!): CategoryModel!
  channel(id: Int!): ChannelModel!
  channels: [ChannelModel!]!
  me: UserModel!
  message(id: Int!): MessageModel!
  messages: [MessageModel!]!
  room(id: Int!): RoomModel!
  rooms(input: SearchRoomInput): [RoomModel!]!
  roomTypes: [RoomTypeModel!]!
  skill(id: Int!): SkillModel!
  skills: [SkillModel!]!
  thread(id: Int!): ThreadModel!
  threads(input: FetchThreadInput!): [ThreadModel!]
  user(userId: String!): UserModel!
  users: [UserModel!]!
}

type RoomMemberModel {
  avatar: String
  createdAt: DateTime!
  email: String!
  githubId: String
  id: Int!
  introduction: String
  memberState: MemberState!
  name: String!
  ownerTeams: [RoomModel!]!
  skills: [SkillModel!]!
  teams: [RoomModel!]!
  twitterId: String
  userId: String!
}

type RoomModel {
  categories: [CategoryModel!]!
  channels: [ChannelModel!]
  createdAt: DateTime
  description: String!
  icon: String
  id: Int
  isRequired: Boolean!
  members: [RoomMemberModel!]
  name: String!
  owner: UserModel!
  recruitNumbers: Int!
  repositoryUrl: String
  skills: [SkillModel!]
  slug: String!
  title: String!
  types: [RoomTypeModel!]!
}

type RoomTypeModel {
  id: Int!
  name: String!
}

input SearchRoomInput {
  categoryIds: [Int!]
  name: String
  recruitNumbers: Int
  skillIds: [Int!]
  typeId: Int
}

input SkillInput {
  icon: String
  id: Int!
  name: String
}

type SkillModel {
  icon: String!
  id: Int!
  name: String!
}

type Subscription {
  messageAdded(roomId: Int!): MessageModel!
  threadAdded(channelId: Int!): ThreadModel!
}

type ThreadModel {
  channel: ChannelModel!
  createdAt: DateTime!
  id: Int!
  numberOfMessages: Int!
  text: String!
  user: UserModel!
}

input UpdateCategoryInput {
  id: Int!
  name: String
}

input UpdateMessageInput {
  id: Int!
  text: String
  thread: ConnectThreadInput
  user: ConnectUserInput
}

input UpdateRoomInput {
  categories: [CategoryInput!]
  description: String
  icon: String
  id: Int!
  isRequired: Boolean
  members: [CreateRoomMembersUserInput!]
  name: String
  owner: ConnectUserInput
  recruitNumbers: Int
  rectuiting: Boolean
  repositoryUrl: String
  skills: [SkillInput!]
  title: String
  typeIds: [Int!]
}

input UpdateSkillInput {
  icon: String
  id: Int!
  name: String
}

input UpdateThreadInput {
  id: Int!
  text: String!
}

input UpdateUserInput {
  avatar: String
  email: String
  githubId: String
  id: Int!
  introduction: String
  name: String
  skills: [SkillInput!]
  twitterId: String
  userId: String
}

type UserMemberModel {
  categories: [CategoryModel!]!
  channels: [ChannelModel!]
  createdAt: DateTime
  description: String!
  icon: String
  id: Int
  isRequired: Boolean!
  members: [RoomMemberModel!]
  memberState: MemberState!
  name: String!
  owner: UserModel!
  recruitNumbers: Int!
  repositoryUrl: String
  skills: [SkillModel!]
  title: String!
}

type UserModel {
  avatar: String
  channels: [ChannelModel!]
  email: String!
  githubId: String
  id: Int!
  introduction: String
  name: String!
  ownerTeams: [RoomModel!]
  rooms: [UserMemberModel!]
  skills: [SkillModel!]
  twitterId: String
  userId: String!
}
